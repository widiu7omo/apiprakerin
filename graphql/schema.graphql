#import mahasiswa.graphql
#import auth.graphql
"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-01-01 13:00:00`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"A date string with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

type Query {
    akuns: [Akun] @all
    akun(username: ID ,password:String @eq): Akun @find
    prodis: [Prodi] @all
    prodi(id_progam_studi:ID @eq): Prodi @find
    tahunakademiks:[TahunAkademik] @all
    tahunakademik(id_tahun_akademik:ID @eq): TahunAkademik @find
    me: User @middleware(checks:["auth:api"]) @auth
}
type Mutation {
    inTahunAkademik(input:insertTahunAkademik!) : TahunAkademik @create(flatten:true)
    inAkun(input:insertAkun!):Akun @create(flatten:true)
    inProgramStudi(input:insertProgramStudi!):Prodi @create(flatten:true)
    inTahunAkademikWithMahasiswa(input:insertTahunAkademik!): TahunAkademik @create(flatten:true)
    upTahunAkademikWithMahasiswa(input:insertTahunAkademik!): TahunAkademik @update(flatten:true)
}

input insertProgramStudi {
    id_program_studi: ID!
    nama_program_studi: String
    mahasiswas:createMahasiswaRelation
}

input insertTahunAkademik {
    id_tahun_akademik:ID!
    tahun_akademik:String
    mahasiswas:createMahasiswaRelation
}

input createMahasiswaRelation{
    create:[insertMahasiswa!]!
}

input createProdiRelation {
    connect: ID
    create: insertProgramStudi
}

input createTARelation {
    connect: ID
    create: insertTahunAkademik
}

input createAkunRelation {
    connect: ID
    create: insertAkun
    # update still needed
}

input createUserRelation{
    connect: ID
    create: insertUser
}

input createLevelRelation {
    connect:ID
    create:[insertLevel]
}

input insertAkun {
    username:String!
    password:String! @bcrypt
    mahasiswas:createMahasiswaRelation
    pivotlevels:createLevelRelation!
}

input insertUser {
    username:String!
    password:String! @bcrypt
    mahasiswas:createMahasiswaRelation
    pivotlevels:createLevelRelation!
}

input createMasterLevelRelation {
    connect:ID
}

input insertLevel {
    id_level:ID
    nama_level:String
    masterlevel:createMasterLevelRelation
}

type Prodi {
    id_program_studi: ID!
    nama_program_studi: String
    mahasiswa: [Mahasiswa] @hasMany
}

type TahunAkademik {
    id_tahun_akademik:ID!
    tahun_akademik: String
    mahasiswas:[Mahasiswa] @hasMany
}

type Akun {
    username: ID!
    password: String
    mahasiswas: [Mahasiswa] @hasMany
    pivotlevels: [Pivotlevel] @hasMany
}

type User {
    username: ID!
    password: String
    mahasiswas: [Mahasiswa] @hasMany
    pivotlevels: [Pivotlevel] @hasMany
#   Pegawai not yet
}

type Masterlevel {
    id_master_level:ID!
    nama_master_level:String
    pivotlevels:[Pivotlevel] @hasMany
}

type Pivotlevel {
    id_level:ID!
    nama_level:String
    akun: Akun @belongsTo
    masterlevel: Masterlevel @belongsTo
}
